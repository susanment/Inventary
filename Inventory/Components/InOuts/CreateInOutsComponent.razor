@using Entities
@using Business
<div class="form-group">
    <select class="form-control" @onchange="OnChangeWarehouses">
        <option value="">Seleccione una bodega</option>
        @foreach (var item in warehouses)
        {
            <option value="@item.WarehouseId">@item.WarehouseName</option>
        }
    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">

            <option value="">Seleccione un producto</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escribe la cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity"></InputNumber>
    </div>
    <div class="form-group">
        <label>Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput"></InputCheckbox>
    </div>
    <input type="button" class="btn btn-primary" value="@ButtonValue" @onclick="SaveInOut" />

</EditForm>
<div>
    @Message
</div>
@code {
    InputOutputEntity oInOut = new InputOutputEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    string ButtonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";
    Entities.ProductEntity oProduct = new ProductEntity();
    Entities.StorageEntity oStorage = new StorageEntity();
    string Message;
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WherehouseList();
    }

    private void OnChangeWarehouses(ChangeEventArgs e)
    {
        var IdWarehouses = e.Value.ToString();
        storages = B_Storage.StorageListByWarehouse(IdWarehouses);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;
        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);
            oProduct.TotalQty = oProduct.TotalQty + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);
            Message = $"El producto {oProduct.ProductName} ha sido actualizado.";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);
                oProduct.TotalQty = oProduct.TotalQty - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);
                Message = $"El producto {oProduct.ProductName} ha sido actualizado.";
            }
            else
            {
                Message = $"No existe la cantidad suficiete en bodega para el producto {oProduct.ProductName}";
            }

        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }
}
